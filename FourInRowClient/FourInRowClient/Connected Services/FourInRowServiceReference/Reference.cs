//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FourInRowClient.FourInRowServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserPasswordFault", Namespace="http://schemas.datacontract.org/2004/07/WcfFourInRowServer")]
    [System.SerializableAttribute()]
    public partial class UserPasswordFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserIdNotExistFault", Namespace="http://schemas.datacontract.org/2004/07/WcfFourInRowServer")]
    [System.SerializableAttribute()]
    public partial class UserIdNotExistFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserIdExistsFault", Namespace="http://schemas.datacontract.org/2004/07/WcfFourInRowServer")]
    [System.SerializableAttribute()]
    public partial class UserIdExistsFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FourInRowServiceReference.IFour_in_rowService", CallbackContract=typeof(FourInRowClient.FourInRowServiceReference.IFour_in_rowServiceCallback))]
    public interface IFour_in_rowService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/Connect", ReplyAction="http://tempuri.org/IFour_in_rowService/ConnectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FourInRowClient.FourInRowServiceReference.UserPasswordFault), Action="http://tempuri.org/IFour_in_rowService/ConnectUserPasswordFaultFault", Name="UserPasswordFault", Namespace="http://schemas.datacontract.org/2004/07/WcfFourInRowServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(FourInRowClient.FourInRowServiceReference.UserIdNotExistFault), Action="http://tempuri.org/IFour_in_rowService/ConnectUserIdNotExistFaultFault", Name="UserIdNotExistFault", Namespace="http://schemas.datacontract.org/2004/07/WcfFourInRowServer")]
        void Connect(string clientId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/Connect", ReplyAction="http://tempuri.org/IFour_in_rowService/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync(string clientId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/Register", ReplyAction="http://tempuri.org/IFour_in_rowService/RegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FourInRowClient.FourInRowServiceReference.UserIdExistsFault), Action="http://tempuri.org/IFour_in_rowService/RegisterUserIdExistsFaultFault", Name="UserIdExistsFault", Namespace="http://schemas.datacontract.org/2004/07/WcfFourInRowServer")]
        void Register(string clientId, string clientName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/Register", ReplyAction="http://tempuri.org/IFour_in_rowService/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(string clientId, string clientName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/UpdateInformationList", ReplyAction="http://tempuri.org/IFour_in_rowService/UpdateInformationListResponse")]
        void UpdateInformationList(string fromClient, string choosenClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/UpdateInformationList", ReplyAction="http://tempuri.org/IFour_in_rowService/UpdateInformationListResponse")]
        System.Threading.Tasks.Task UpdateInformationListAsync(string fromClient, string choosenClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/SendGameRequest", ReplyAction="http://tempuri.org/IFour_in_rowService/SendGameRequestResponse")]
        bool SendGameRequest(string fromClient, string toClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/SendGameRequest", ReplyAction="http://tempuri.org/IFour_in_rowService/SendGameRequestResponse")]
        System.Threading.Tasks.Task<bool> SendGameRequestAsync(string fromClient, string toClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/Disconnect", ReplyAction="http://tempuri.org/IFour_in_rowService/DisconnectResponse")]
        void Disconnect(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/Disconnect", ReplyAction="http://tempuri.org/IFour_in_rowService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/AddStepToTheGame", ReplyAction="http://tempuri.org/IFour_in_rowService/AddStepToTheGameResponse")]
        bool AddStepToTheGame(double colNum, string fromClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/AddStepToTheGame", ReplyAction="http://tempuri.org/IFour_in_rowService/AddStepToTheGameResponse")]
        System.Threading.Tasks.Task<bool> AddStepToTheGameAsync(double colNum, string fromClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/GameOver", ReplyAction="http://tempuri.org/IFour_in_rowService/GameOverResponse")]
        void GameOver(string WinnerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/GameOver", ReplyAction="http://tempuri.org/IFour_in_rowService/GameOverResponse")]
        System.Threading.Tasks.Task GameOverAsync(string WinnerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/SearchPlayers", ReplyAction="http://tempuri.org/IFour_in_rowService/SearchPlayersResponse")]
        void SearchPlayers(string fromClient, string orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/SearchPlayers", ReplyAction="http://tempuri.org/IFour_in_rowService/SearchPlayersResponse")]
        System.Threading.Tasks.Task SearchPlayersAsync(string fromClient, string orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/GetAllGames", ReplyAction="http://tempuri.org/IFour_in_rowService/GetAllGamesResponse")]
        void GetAllGames(string clientName, string certainGames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/GetAllGames", ReplyAction="http://tempuri.org/IFour_in_rowService/GetAllGamesResponse")]
        System.Threading.Tasks.Task GetAllGamesAsync(string clientName, string certainGames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/closeTheBoard", ReplyAction="http://tempuri.org/IFour_in_rowService/closeTheBoardResponse")]
        void closeTheBoard(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/closeTheBoard", ReplyAction="http://tempuri.org/IFour_in_rowService/closeTheBoardResponse")]
        System.Threading.Tasks.Task closeTheBoardAsync(string clientName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFour_in_rowServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFour_in_rowService/UpdateClientsList")]
        void UpdateClientsList(string[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFour_in_rowService/SendGameRequestToClient", ReplyAction="http://tempuri.org/IFour_in_rowService/SendGameRequestToClientResponse")]
        bool SendGameRequestToClient(string fromClient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFour_in_rowService/NewStepInTheGame")]
        void NewStepInTheGame(double colNum);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFour_in_rowService/UpdateGameOver")]
        void UpdateGameOver(string WinnerName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFour_in_rowService/UpdateInformationsList")]
        void UpdateInformationsList(string[] info, string[] gamesInfo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFour_in_rowService/ViewSearchResult")]
        void ViewSearchResult(string[] searchResult);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFour_in_rowServiceChannel : FourInRowClient.FourInRowServiceReference.IFour_in_rowService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Four_in_rowServiceClient : System.ServiceModel.DuplexClientBase<FourInRowClient.FourInRowServiceReference.IFour_in_rowService>, FourInRowClient.FourInRowServiceReference.IFour_in_rowService {
        
        public Four_in_rowServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Four_in_rowServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Four_in_rowServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Four_in_rowServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Four_in_rowServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(string clientId, string password) {
            base.Channel.Connect(clientId, password);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string clientId, string password) {
            return base.Channel.ConnectAsync(clientId, password);
        }
        
        public void Register(string clientId, string clientName, string password) {
            base.Channel.Register(clientId, clientName, password);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(string clientId, string clientName, string password) {
            return base.Channel.RegisterAsync(clientId, clientName, password);
        }
        
        public void UpdateInformationList(string fromClient, string choosenClient) {
            base.Channel.UpdateInformationList(fromClient, choosenClient);
        }
        
        public System.Threading.Tasks.Task UpdateInformationListAsync(string fromClient, string choosenClient) {
            return base.Channel.UpdateInformationListAsync(fromClient, choosenClient);
        }
        
        public bool SendGameRequest(string fromClient, string toClient) {
            return base.Channel.SendGameRequest(fromClient, toClient);
        }
        
        public System.Threading.Tasks.Task<bool> SendGameRequestAsync(string fromClient, string toClient) {
            return base.Channel.SendGameRequestAsync(fromClient, toClient);
        }
        
        public void Disconnect(string userName) {
            base.Channel.Disconnect(userName);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string userName) {
            return base.Channel.DisconnectAsync(userName);
        }
        
        public bool AddStepToTheGame(double colNum, string fromClient) {
            return base.Channel.AddStepToTheGame(colNum, fromClient);
        }
        
        public System.Threading.Tasks.Task<bool> AddStepToTheGameAsync(double colNum, string fromClient) {
            return base.Channel.AddStepToTheGameAsync(colNum, fromClient);
        }
        
        public void GameOver(string WinnerName) {
            base.Channel.GameOver(WinnerName);
        }
        
        public System.Threading.Tasks.Task GameOverAsync(string WinnerName) {
            return base.Channel.GameOverAsync(WinnerName);
        }
        
        public void SearchPlayers(string fromClient, string orderBy) {
            base.Channel.SearchPlayers(fromClient, orderBy);
        }
        
        public System.Threading.Tasks.Task SearchPlayersAsync(string fromClient, string orderBy) {
            return base.Channel.SearchPlayersAsync(fromClient, orderBy);
        }
        
        public void GetAllGames(string clientName, string certainGames) {
            base.Channel.GetAllGames(clientName, certainGames);
        }
        
        public System.Threading.Tasks.Task GetAllGamesAsync(string clientName, string certainGames) {
            return base.Channel.GetAllGamesAsync(clientName, certainGames);
        }
        
        public void closeTheBoard(string clientName) {
            base.Channel.closeTheBoard(clientName);
        }
        
        public System.Threading.Tasks.Task closeTheBoardAsync(string clientName) {
            return base.Channel.closeTheBoardAsync(clientName);
        }
    }
}
